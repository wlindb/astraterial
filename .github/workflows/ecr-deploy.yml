name: ECR Deploy 

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      env:
        type: string
        description: 'Environment'
        required: true
      base-url:
        type: string
        description: 'Base url of the application'
      cms-base-url:
        type: string
        description: 'Base url of the cms'
      region:
        type: string
        description: 'name of the lambda function to update'
        default: 'eu-north-1'
    secrets:
      aws-access-key-id:
        description: 'AWS Access Key ID'
        required: true
      aws-secret-key:
        description: 'AWS Secret Key'
        required: true
      cms-read-api-key:
        description: 'CMS Read API key'
        required: true

concurrency:
  group: client
  # group: ${{ inputs.function-name }}-deploy-group
  cancel-in-progress: false

jobs:
  check-infrastructure-changes:
    runs-on: ubuntu-latest
    outputs:
      infrastructure_changed: ${{ steps.check.outputs.infrastructure_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for Infrastructure Changes
        id: check
        run: |
          git fetch origin ${{ github.event.before }} ${{ github.sha }}
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changes.txt
          if grep -q '^infrastructure/' changes.txt; then
            echo "infrastructure_changed=true" >> $GITHUB_ENV
            echo "infrastructure_changed=true" >> $GITHUB_OUTPUT
          else
            echo "infrastructure_changed=false" >> $GITHUB_ENV
            echo "infrastructure_changed=false" >> $GITHUB_OUTPUT
          fi

  test-and-deploy:
    runs-on: ubuntu-latest
    needs: check-infrastructure-changes
    if: needs.check-infrastructure-changes.outputs.infrastructure_changed == 'false'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-key }}
          aws-region: ${{ inputs.region }}

      - name: Login to Amazon ECR 
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: client-repository
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
          --build-arg ENVIRONMENT=${{ inputs.env }} \
          --build-arg NEXT_PUBLIC_BASE_URL=${{ inputs.base-url }} \
          --build-arg CMS_BASE_URL=${{ inputs.cms-base-url }} \
          --build-arg CMS_READ_API_KEY=${{ secrets.cms-read-api-key }} \
          -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

